<?php

namespace CrCms\Foundation\WebSocket\Events;

use CrCms\Foundation\Swoole\Server;
use Swoole\Http\Request as SwooleRequest;
use Illuminate\Http\Request as IlluminateRequest;
use Symfony\Component\HttpFoundation\Request as SymfonyRequest;
use Symfony\Component\HttpFoundation\ParameterBag;
use CrCms\Foundation\Swoole\Server\Events\AbstractEvent;
use CrCms\Foundation\Swoole\Server\Contracts\EventContract;
use CrCms\Foundation\Swoole\Server\AbstractServer;

/**
 * Class OpenEvent
 * @package CrCms\Foundation\WebSocket\Events
 */
class OpenEvent extends AbstractEvent implements EventContract
{
    protected $request;

    /**
     * @var IlluminateRequest
     */
    protected $illuminateRequest;

    public function __construct(SwooleRequest $request)
    {
        $this->request = $request;
        $this->illuminateRequest = $this->createIlluminateRequest();
    }

    public function handle(AbstractServer $server) : void
    {
        parent::handle($server); // TODO: Change the autogenerated stub


    }

    public function getRequest(): SwooleRequest
    {
        return $this->request;
    }

    public function getIlluminateRequest()
    {
        return $this->illuminateRequest;
    }

    /**
     * @return array
     */
    protected function mergePostData(): array
    {
        $data = [];

        if (strtoupper($this->request->server['request_method']) === 'POST') {
            $data = empty($this->request->post) ? [] : $this->request->post;

            if (stripos($this->request->header['content-type'], 'application/json') !== false) {
                $data = array_merge($data, json_decode($this->request->rawContent(), true));
            }
        }
//dump($data);
        return $data;
    }

    /**
     * @return array
     */
    protected function mergeServerInfo(): array
    {
        $server = $_SERVER;
        if ('cli-server' === PHP_SAPI) {
            if (array_key_exists('HTTP_CONTENT_LENGTH', $_SERVER)) {
                $server['CONTENT_LENGTH'] = $_SERVER['HTTP_CONTENT_LENGTH'];
            }
            if (array_key_exists('HTTP_CONTENT_TYPE', $_SERVER)) {
                $server['CONTENT_TYPE'] = $_SERVER['HTTP_CONTENT_TYPE'];
            }
        }

        $requestHeader = collect($this->request->header)->mapWithKeys(function ($item, $key) {
            $key = str_replace('-', '_', $key);
            return in_array(strtolower($key), ['x_real_ip'], true) ?
                [$key => $item] :
                ['http_' . $key => $item];
        })->toArray();

        $server = array_merge($server, $this->request->server, $requestHeader);//,$requestHeader

        return array_change_key_case($server, CASE_UPPER);
    }

    protected function createFromGlobals(): SymfonyRequest
    {
        $request = new SymfonyRequest(
            $this->request->get ?? [],
            $this->mergePostData(),
            [],
            $this->request->cookie ?? [],
            $this->request->files ?? [],
            $this->mergeServerInfo()
            , $this->request->rawContent()
        );

        if (0 === strpos($request->headers->get('CONTENT_TYPE'), 'application/x-www-form-urlencoded')
            && in_array(strtoupper($request->server->get('REQUEST_METHOD', 'GET')), array('PUT', 'DELETE', 'PATCH'))
        ) {
            parse_str($request->getContent(), $data);
            $request->request = new ParameterBag($data);
        }

        return $request;
    }

    /**
     * @return IlluminateRequest
     */
    protected function createIlluminateRequest(): IlluminateRequest
    {
        IlluminateRequest::enableHttpMethodParameterOverride();

        return IlluminateRequest::createFromBase($this->createFromGlobals());
    }

}